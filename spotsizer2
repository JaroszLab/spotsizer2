#!/home/stephankamrad/software/Mathematica/10.04/MathematicaScript -script


(*Set up universal functions*)
CustEucl[x1_, x2_] := EuclideanDistance[x1[[2]], x2[[2]]];
top20mean[inlist_] := Mean[Sort[inlist][[Round[Length[inlist]*0.8, 1] ;;]]];
SetMin[inList_] := Map[(If[# == Min[inList], #, 1000000]) &, inList];

MakeMask[image_] :=
    Module[{mask, intensityThreshold, threshold},
        intensityThreshold = If[hardImageThresholdQ==True, hardImageThreshold, imageThreshold*FindThreshold[image]];
        mask = MorphologicalComponents[image, intensityThreshold];
        threshold = If[hardSizeThresholdQ, hardSizeThreshold, sizeThreshold*ImageDimensions[image][[1]] / 32.0];
        mask = SelectComponents[mask, "Area", (threshold < #) &];
        mask = SelectComponents[mask, "Area", ((0.02*ImageDimensions[image][[1]]*ImageDimensions[image][[2]]) > #) &];(*Filter out hings which cover more than 2% of image area*)
        mask = DeleteBorderComponents[mask];
        Return[mask];
        ];

MakeGrid[cfile_] :=
    Module[{gridSpec, formatConverter, rows, cols, xpos, ypos, grid, gridDist},

        (*Import grid file*)
        gridSpec = Import[cfile, "CSV"][[1]];

        (*entries are: number of rows, number of columns, x of top left colony, y of top left colony, x of bottom right colony, y of bottom right colony*)
        rows = gridSpec[[1]];
        cols = gridSpec[[2]];
        
        xpos = Range[gridSpec[[3]], gridSpec[[5]], (gridSpec[[5]] - gridSpec[[3]])/(cols - 1)];
        ypos = Range[gridSpec[[4]], gridSpec[[6]], (gridSpec[[6]] - gridSpec[[4]])/(rows - 1)];

        grid = Table[{y, x} -> {xpos[[x]], ypos[[y]]}, {x, Length[xpos]}, {y, Length[ypos]}];
        gridDist = grid[[1, 1, 2, 2]] - grid[[1, 2, 2, 2]];
        Return[{grid, gridDist}];
        ];

MatchComponentsToGrid[mask_, baseStr_] :=
    Module[{comPos, distMat, matches, posDict, gridToLabel, ComponentToLabel, labels, labelledImage, gtlAssoc},
        (*Match positions to grid*)
        comPos = ComponentMeasurements[mask, "Centroid"];
        distMat = DistanceMatrix[Flatten[grid, 1], comPos, DistanceFunction -> CustEucl];
        matches = If[onlyNearestQ, Position[Map[SetMin, distMat], _?(# < (gridDist/distanceThreshold) &)], Position[distMat, _?(# < (gridDist/distanceThreshold) &)]];

        posDict = Table[Flatten[grid, 1][[x[[1]]]][[1]] -> comPos[[x[[2]]]][[1]], {x, matches}];
        
        (*Match grid and labels*) 
        gridToLabel = Table[pos -> StringJoin[ToString[pos[[1]]], "-", ToString[pos[[2]]]], {pos, posDict[[All, 1]]}];
        gtlAssoc = Association[gridToLabel];

        
        ComponentToLabel = Association[Table[Association[posDict][x[[1]]] -> x[[2]], {x, gridToLabel}]];

        (*make QC image and export*)  
        labels = Map[#[[1]] -> (#[[2]] /. comPos) &, posDict];
        labels = Map[((#[[1]] /. gridToLabel ) -> #[[2]]) &, labels];
        labels = Table[{White, Style[Text[comp[[1]], comp[[2]]], FontSize -> 11]}, {comp, labels}]; 
        labelledImage = Show[mask//Colorize, Graphics[labels]];
        Export[StringJoin["spotsizer2_qc/", baseStr, "_mask.png"], labelledImage, "PNG"];
        

        gridImage = Table[{White, Style[Text["X", pos], FontSize -> 16]}, {pos, Flatten[grid][[All, 2]]}];
        gridLabelledImage = Show[mask//Colorize, Graphics[gridImage]];
        Export[StringJoin["spotsizer2_qc/", baseStr, "_grid.png"], gridLabelledImage, "PNG"];
        
        Return[{posDict, gtlAssoc}];
        ];


CFUQ[toAnalyse_] := 
    Module[{analyse},
        analyse[imagePath_] := 
            Module[{image, mask, posDict, headers, data, baseStr}, 
                baseStr = StringSplit[StringSplit[imagePath, "/"][[-1]], "."][[;;-2]];
            
                image = If[negateQ, ColorNegate[Import[imagePath]], Import[imagePath]];
                mask = MakeMask[image];
                posDict = MatchComponentsToGrid[mask, baseStr][[1]];

                headers = {"Row", "Column", "CFU"} ;
                data = Table[{entry[[1]], entry[[2]], If[MemberQ[posDict[[All, 1]], entry], "True", "False"]}, {entry, Flatten[grid[[All, All, 1]], 1]}];
                Export[StringJoin["spotsizer2_results/", baseStr, ".csv"], Join[{headers}, data], "CSV"];
                ];
        If[parallelQ, ParallelDo[analyse[imagePath], {imagePath, toAnalyse}], Do[analyse[imagePath], {imagePath, toAnalyse}]]];

Batch[toAnalyse_] :=
    Module[{analyse},
        analyse[imagePath_] := 
            Module[{image, mask, posDict, headers, data, baseStr, background, backgroundInt, gtlAssoc, areas, intensities}, 
                baseStr = StringSplit[StringSplit[imagePath, "/"][[-1]], "."][[;;-2]];
            
                image = If[negateQ, ColorNegate[Import[imagePath]], Import[imagePath]];
                mask = MakeMask[image];
                posDict = MatchComponentsToGrid[mask, baseStr][[1]];
                gtlAssoc = MatchComponentsToGrid[mask, baseStr][[2]];

                (*Find background intensitiy*)
                background = Table[1, {i, Dimensions[mask][[1]]}, {j, Dimensions[mask][[2]]}] - Unitize[mask];
                backgroundInt = ComponentMeasurements[{background, image}, "MeanIntensity"];
                
                (*Measure area and intensities*)
                areas = Association[ComponentMeasurements[{mask, image}, "Area"]];
                intensities = ComponentMeasurements[{mask, image}, "IntensityData"];
                intensities[[All, 2]] = intensities[[All, 2]] - backgroundInt[[1, 2]];
                intensities = Map[Total, Association[intensities]];
                
                (*Compile table and export*)
                data = Table[{gtlAssoc[x[[1]]], x[[1, 1]], x[[1, 2]], areas[x[[2]]], intensities[x[[2]]]}, {x, posDict}];
                headers = {"Position", "Row", "Column", "Area", "IntegratedIntensity"};

                Export[StringJoin["spotsizer2_results/", baseStr, ".csv"], Join[{headers}, data], "CSV"];
                ];
                
        If[parallelQ, ParallelDo[analyse[imagePath], {imagePath, toAnalyse}], Do[analyse[imagePath], {imagePath, toAnalyse}]]];
        
Timecourse[toAnalyse_] :=
    Module[{analyse, finalImagePath, finalImage, intData, data, finalImageMask, finalImageBaseStr, finalImagePosDict, finalImagegtlAssoc, headers},
        analyse[imagePath_, mask_] := 
            Module[{image, background, backgroundInt, intensities}, 
            
                image = If[negateQ, ColorNegate[Import[imagePath]], Import[imagePath]];
                
                (*Find background intensitiy*)
                background = Table[1, {i, Dimensions[mask][[1]]}, {j, Dimensions[mask][[2]]}] - Unitize[mask];
                backgroundInt = ComponentMeasurements[{background, image}, "MeanIntensity"];
                
                (*Measure intensities*)
                intensities = ComponentMeasurements[{mask, image}, "IntensityData"];
                intensities[[All, 2]] = intensities[[All, 2]] - backgroundInt[[1, 2]];
                intensities = Map[Total, Association[intensities]];                
                Return[intensities];
                ];
        
        finalImagePath = toAnalyse[[-1]];
        finalImage = If[negateQ, ColorNegate[Import[finalImagePath]], Import[finalImagePath]];
        finalImageMask = MakeMask[finalImage];
        finalImageBaseStr = StringSplit[finalImagePath, "."][[1]];
        finalImagePosDict = MatchComponentsToGrid[finalImageMask, finalImageBaseStr][[1]];
        finalImagegtlAssoc = MatchComponentsToGrid[finalImageMask, finalImageBaseStr][[2]];

        If[parallelQ, intData = ParallelTable[analyse[imagePath, finalImageMask], {imagePath, toAnalyse}], intData = Table[analyse[imagePath, finalImageMask], {imagePath, toAnalyse}]];
        
        (*Compile table and export*)
        data = Transpose[Table[Table[entry[x[[2]]], {entry, intData}], {x, finalImagePosDict}]];
        headers = Table[finalImagegtlAssoc[x[[1]]], {x, finalImagePosDict}];
        Export[StringJoin["spotsizer2_results/", finalImageBaseStr, ".csv"], Join[{headers}, data], "CSV"];
        ];

PhloxinB[toAnalyse_] :=
  Module[{analyse},
   analyse[imagePath_] := 
    Module[{image, mask, threshold, posDict, headers, data, baseStr, background, valueImage, backgroundInt, areas, intensities, gtlAssoc, centroids},
     baseStr = StringSplit[StringSplit[imagePath, "/"][[-1]], "."][[;;-2]];

     (*Import the image*)
     image = Import[imagePath];

     (*Multiply channels to make red more visible*)
     image = ImageMultiply[image, {0, 1.75, 1.75}];

     (*Convert to grayscale*)
     image = ColorConvert[image, "Grayscale"];

     (*Subtract background, tends to be more uneven for color images, and make everything a bit brighter*)
     image = ImageSubtract[ image, GaussianFilter[image, {100, 20}]];

     (*Invert color and make a bit brighter*)
     image = ImageMultiply[ColorNegate[image], 0.5];

     (*Export image*)     
     Export[StringJoin["spotsizer2_qc/", baseStr, "_backgroundSubtracted.png"], image, "PNG"];     
     mask = MakeMask[image];
     posDict = MatchComponentsToGrid[mask, baseStr][[1]];
     gtlAssoc = MatchComponentsToGrid[mask, baseStr][[2]];
     
     (*Measure area and intensities, subtract background*)     
     areas = Association[ComponentMeasurements[{mask, image}, "Area"]];
     intensities = Association[ComponentMeasurements[{mask, image}, "MeanIntensity"]];
     centroids = Association[ComponentMeasurements[{mask, image}, "Centroid"]];
     valueImage = Table[{White, Style[Text[NumberForm[intensities[x[[2]]], 2], {centroids[x[[2]]][[1]], centroids[x[[2]]][[2]] + 10}], FontSize -> 8]}, {x, posDict}];
     Export[StringJoin["spotsizer2_qc/", baseStr, "_meanIntensities.png"], Show[Import[imagePath], Graphics[valueImage]], "PNG"];
     
     (*Compile table and export*)
     data = Table[{gtlAssoc[x[[1]]], x[[1, 1]], x[[1, 2]], areas[x[[2]]], intensities[x[[2]]]}, {x, posDict}];
     headers = {"Position", "Row", "Column", "Area", "MeanIntensity"};
     Export[StringJoin["spotsizer2_results/", baseStr, ".csv"], Join[{headers}, data], "CSV"];
     ];
   If[parallelQ, 
    ParallelDo[analyse[imagePath], {imagePath, toAnalyse}], 
    Do[analyse[imagePath], {imagePath, toAnalyse}]];
   ];



(*Main block*)
Print["Welcome to Spotsizer2"];
Print[StringJoin["The working directory is: ", Directory[]]];

configPath = If[FileExistsQ["spotsizer2.config"], "spotsizer2.config", StringJoin[$ScriptCommandLine[[1]], ".config"]];
If[FileExistsQ["spotsizer2.config"], Print["Reading local spotsizer2.config file."], Print["spotsizer2.config file not found in current directory. Reading default parameters."]];
If[FileExistsQ["spotsizer2.config"], Get["spotsizer2.config"], Get[StringJoin[$ScriptCommandLine[[1]], ".config"]]];

On[Assert];
Assert[BooleanQ[parallelQ]];
Assert[imageThreshold > 0];
Assert[distanceThreshold > 2];
Assert[sizeThreshold > 0];
Assert[BooleanQ[negateQ]];
Assert[BooleanQ[onlyNearestQ]];
Assert[BooleanQ[hardImageThresholdQ]];
Assert[BooleanQ[hardSizeThresholdQ]];
Assert[BooleanQ[useWorklistQ]];
Print["Using the following parameters:"];
Print["parallelQ: ", parallelQ];
Print["distanceThreshold: ", distanceThreshold];
Print["imageThreshold: ", imageThreshold];
Print["sizeThreshold: ", sizeThreshold];
Print["negateQ: ", negateQ];
Print["onlyNearestQ: ", onlyNearestQ];
Print["hardImageThresholdQ: ", hardImageThresholdQ];
Print["useWorklistQ: ", useWorklistQ];
If[hardImageThresholdQ, Print["hardImageThreshold: ", hardImageThreshold]];
Print["hardSizeThresholdQ: ", hardSizeThresholdQ];
If[hardSizeThresholdQ, Print["hardSizeThreshold: ", hardSizeThreshold]];

CreateDirectory["spotsizer2_results"];
CreateDirectory["spotsizer2_qc"];

(*Find image files and analyse*)
toAnalyse = If[useWorklistQ, ReadList["worklist.txt", String], FileNames[{"*.JPG", "*.jpg", "*.PNG", "*.png", "*.TIFF", "*.tiff"}]];
Print["Spotsizer2 will analyse the following images:"];
Print[toAnalyse];

(*Load grid*)
Print["Reading grid.csv file."];
gridResult = MakeGrid["grid.txt"];
grid = gridResult[[1]];
gridDist = gridResult[[2]];

(*Run*)
If[parallelQ,LaunchKernels[$ProcessorCount]];
cmd = $ScriptCommandLine[[-1]];
If[!MemberQ[{"cfuq", "timecourse", "batch", "phloxinb"}, cmd], Print["ERROR: Running mode must be one of {cfuq, timecourse, batch, phloxinb}"]; Abort[];];
Print[StringJoin["Running analysis in ", cmd, " mode."]];

Which[cmd=="cfuq", CFUQ[toAnalyse],
      cmd=="timecourse", Timecourse[toAnalyse],
      cmd=="batch", Batch[toAnalyse],
      cmd=="phloxinb", PhloxinB[toAnalyse]
      ];
Print["Done."];
